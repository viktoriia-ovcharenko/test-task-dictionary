{"version":3,"sources":["features/count.ts","features/words.ts","app/store.ts","components/WordsList/WordsList.tsx","components/HomePage/HomePage.tsx","components/TextField/TextField.tsx","app/hooks.ts","components/NewWord/NewWord.tsx","components/Header/Header.tsx","components/PageNotFound/PageNotFound.tsx","components/Test/Test.tsx","App.tsx","index.tsx"],"names":["actions","value","type","payload","countReducer","count","action","words","word","id","wordsReducer","filter","reducer","combineReducers","store","createStore","WordsList","onDelete","className","cellSpacing","map","text","translation","onClick","HomePage","TextField","name","label","required","onChange","isWordValid","useState","Math","random","toString","slice","touched","setToched","hasError","trim","textIsNotValid","htmlFor","classNames","placeholder","event","target","onBlur","useAppDispatch","useDispatch","useAppSelector","useSelector","NewWord","onAdd","maxId","setText","setTranslation","dispatch","state","inputedText","test","isTranslateValid","inputedTranslate","isDisabled","onSubmit","preventDefault","countActions","disabled","Header","isChoosen","setIsChoosen","to","PageNotFound","shuffle","arr","sort","Test","showResults","setShowResults","score","setScore","currentQuestion","setCurrentQuestion","questions","i","length","dictionary","JSON","parse","stringify","push","options","isCorrect","option","App","useEffect","wordsActions","deleteWord","wordId","max","path","element","replace","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ce1e5a2e.chunk.js","sourcesContent":["type AddAction = {\n  type: 'count/ADD',\n  payload: number,\n};\n\ntype TakeAction = {\n  type: 'count/TAKE',\n  payload: number,\n};\n\nconst add = (value: number): AddAction => ({\n  type: 'count/ADD',\n  payload: value,\n});\n\nconst take = (value: number): TakeAction => ({\n  type: 'count/TAKE',\n  payload: value,\n});\n\ntype Action = AddAction | TakeAction;\n\nconst countReducer = (count = 0, action: Action) => {\n  switch (action.type) {\n    case 'count/ADD':\n      return count + action.payload;\n\n    case 'count/TAKE': {\n      if (action.payload > count) {\n        return count;\n      }\n\n      return count - action.payload;\n    }\n\n    default:\n      return count;\n  }\n};\n\nexport const actions = { add, take };\n\nexport default countReducer;\n","import { Word } from '../types/Word';\n\ntype SetWordsAction = {\n  type: 'words/SET',\n  payload: Word[],\n};\n\ntype AddWordsAction = {\n  type: 'words/ADD',\n  payload: Word,\n};\n\ntype RemoveWordsAction = {\n  type: 'words/REMOVE',\n  payload: number,\n};\n\nconst setWords = (words: Word[]): SetWordsAction => ({\n  type: 'words/SET',\n  payload: words,\n});\n\nconst addWords = (word: Word): AddWordsAction => ({\n  type: 'words/ADD',\n  payload: word,\n});\n\nconst removeWords = (id: number): RemoveWordsAction => ({\n  type: 'words/REMOVE',\n  payload: id,\n});\n\nexport const actions = { setWords, addWords, removeWords };\n\ntype Action = SetWordsAction | AddWordsAction | RemoveWordsAction;\n\nconst wordsReducer = (\n  words: Word[] = [],\n  action: Action,\n): Word[] => {\n  switch (action.type) {\n    case 'words/SET':\n      return action.payload;\n\n    case 'words/ADD':\n      return [\n        action.payload,\n        ...words,\n      ];\n\n    case 'words/REMOVE':\n      return words.filter(word => word.id !== action.payload);\n\n    default:\n      return words;\n  }\n};\n\nexport default wordsReducer;\n","import { combineReducers, legacy_createStore as createStore } from 'redux';\nimport countReducer from '../features/count';\nimport wordsReducer from '../features/words';\n\nconst reducer = combineReducers({\n  words: wordsReducer,\n  count: countReducer,\n});\nconst store = createStore(reducer);\n\nexport default store;\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import React from 'react';\nimport './WordsList.scss';\nimport { Word } from '../../types/Word';\n\ninterface Props {\n  words: Word[];\n  onDelete: (wordId: number) => void;\n}\n\nexport const WordsList: React.FC<Props> = ({ words, onDelete }) => {\n  return (\n    <table className=\"words-list\" cellSpacing=\"0\">\n      <tr className=\"words-list__title\">\n        <th className=\"words-list__title__text text\">Word</th>\n        <th className=\"words-list__title__text text\">Translation</th>\n        <th className=\"words-list__title__text text\"> </th>\n      </tr>\n      {words.map(word => (\n        <>\n          <tr key={word.id} className=\"words-list__items\">\n            <td className=\"words-list__items__text text\">{word.text}</td>\n            <td className=\"words-list__items__text text\">\n              {word.translation}\n            </td>\n            <td className=\"words-list__items__text\">\n              <button type=\"button\" className=\"button-delete\" onClick={() => onDelete(word.id)}>❌</button>\n            </td>\n          </tr>\n        </>\n      ))}\n    </table>\n  );\n};\n","import React from 'react';\nimport './HomePage.scss';\nimport { Word } from '../../types/Word';\nimport { WordsList } from '../WordsList';\n\ninterface Props {\n  words: Word[];\n  onDelete: (wordId: number) => void;\n}\n\nexport const HomePage: React.FC<Props> = ({ words, onDelete }) => {\n  return (\n    <div className=\"home container\">\n      <h1 className=\"home__title\">Your Dictionary</h1>\n      <WordsList words={words} onDelete={onDelete} />\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport './TextField.scss';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  required?: boolean,\n  onChange?: (newValue: string) => void,\n  isWordValid: boolean,\n};\n\nfunction getRandomDigits() {\n  return Math.random().toString().slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  required = false,\n  onChange = () => {},\n  isWordValid = true,\n}) => {\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n\n  const [touched, setToched] = useState(false);\n  const hasError = touched && required && !value.trim();\n  const textIsNotValid = touched && !isWordValid;\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n      <div className=\"control\">\n        <input\n          id={id}\n          className={classNames('input', {\n            'is-danger': hasError,\n          })}\n          type=\"text\"\n          placeholder={`Enter ${label}`}\n          value={value}\n          onChange={event => onChange(event.target.value)}\n          onBlur={() => setToched(true)}\n        />\n      </div>\n      {hasError && (\n        <p className=\"help is-danger\">{`${label} is required`}</p>\n      )}\n\n      {textIsNotValid && (\n        <p className=\"help is-danger\">{`${label} is not valid`}</p>\n      )}\n    </div>\n  );\n};\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import React, { useState } from 'react';\nimport './NewWord.scss';\nimport classNames from 'classnames';\nimport { Word } from '../../types/Word';\nimport { TextField } from '../TextField';\nimport { WordsList } from '../WordsList';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as countActions } from '../../features/count';\n\ninterface Props {\n  onAdd: (word: Word) => void;\n  onDelete: (wordId: number) => void;\n  maxId: number;\n  words: Word[];\n}\n\nexport const NewWord: React.FC<Props> = ({\n  onAdd,\n  onDelete,\n  maxId,\n  words,\n}) => {\n  const [text, setText] = useState('');\n  const [translation, setTranslation] = useState('');\n\n  const dispatch = useAppDispatch();\n  const count = useAppSelector(state => state.count);\n\n  const reset = () => {\n    setText('');\n    setTranslation('');\n  };\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    const word = {\n      id: maxId + 1,\n      text,\n      translation,\n    };\n\n    onAdd(word);\n    dispatch(countActions.add(1));\n    reset();\n  };\n\n  const isWordValid = (inputedText: string) => {\n    const pattern = /[А-Яа-яёЁЇїІіЄєҐґ]/;\n\n    return pattern.test(inputedText);\n  };\n\n  const isTranslateValid = (inputedTranslate: string) => {\n    const pattern = /[a-zA-Z]/;\n\n    return pattern.test(inputedTranslate);\n  };\n\n  const isDisabled = !(text.trim() && translation.trim()\n   && isWordValid(text) && isTranslateValid(translation));\n\n  return (\n    <>\n      <form\n        className=\"new-word\"\n        key={count}\n        onSubmit={handleSubmit}\n      >\n        <h2 className=\"new-word__title\">Add a word</h2>\n\n        <TextField\n          name=\"text\"\n          label=\"Word in Ukrainian\"\n          value={text}\n          onChange={setText}\n          required\n          isWordValid={isWordValid(text)}\n        />\n\n        <TextField\n          name=\"translation\"\n          label=\"English translation\"\n          value={translation}\n          onChange={setTranslation}\n          required\n          isWordValid={isTranslateValid(translation)}\n        />\n\n        <div className=\"new-word__field is-grouped\">\n          <div className=\"control\">\n            <button\n              type=\"submit\"\n              className={classNames(\n                'button is-link',\n                { disabled: isDisabled },\n              )}\n              disabled={isDisabled}\n            >\n              Add\n            </button>\n          </div>\n        </div>\n      </form>\n\n      {count > 0 && (\n        <>\n          <p className=\"message\">A new word has been added!</p>\n          <WordsList\n            words={words.slice(0, count)}\n            onDelete={onDelete}\n          />\n        </>\n      )}\n    </>\n  );\n};\n","import './Header.scss';\nimport React, { useState } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport classNames from 'classnames';\n\nexport const Header: React.FC = () => {\n  const [isChoosen, setIsChoosen] = useState('Home');\n\n  return (\n    <header className=\"header\">\n      <nav className=\"nav\">\n        <ul className=\"nav__list\">\n          <li className=\"nav__item \">\n            <NavLink\n              to=\"/\"\n              className={classNames('nav__link', {\n                'is-active': isChoosen === 'Home',\n              })}\n              onClick={() => setIsChoosen('Home')}\n            >\n              Home\n            </NavLink>\n          </li>\n          <li className=\"nav__item\">\n            <NavLink\n              to=\"/newWord\"\n              className={classNames('nav__link', {\n                'is-active': isChoosen === 'NewWord',\n              })}\n              onClick={() => setIsChoosen('NewWord')}\n            >\n              New Word\n            </NavLink>\n          </li>\n          <li className=\"nav__item\">\n            <NavLink\n              to=\"/test\"\n              className={classNames('nav__link', {\n                'is-active': isChoosen === 'Test',\n              })}\n              onClick={() => setIsChoosen('Test')}\n            >\n              Test\n            </NavLink>\n          </li>\n        </ul>\n      </nav>\n    </header>\n  );\n};\n","import React from 'react';\nimport './PageNotFound.scss';\n\nexport const PageNotFound: React.FC = () => {\n  return <h1 className=\"page-not-found\">Page not found</h1>;\n};\n","/* eslint-disable jsx-a11y/click-events-have-key-events */\nimport React, { useState } from 'react';\nimport './Test.scss';\nimport { Word } from '../../types/Word';\n\ninterface Props {\n  words: Word[];\n}\n\nfunction shuffle(arr: any) {\n  arr.sort(() => Math.random() - 0.5);\n}\n\nexport const Test: React.FC<Props> = ({ words }) => {\n  const [showResults, setShowResults] = useState(false);\n  const [score, setScore] = useState(0);\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n\n  let questions = [];\n  let i = 0;\n\n  while (questions.length < 10) {\n    const dictionary = JSON.parse(JSON.stringify(words));\n\n    shuffle(dictionary);\n\n    questions.push({\n      text: dictionary[0].text,\n      options: [\n        { id: 0, text: dictionary[0].translation, isCorrect: true },\n        { id: 1, text: dictionary[1].translation, isCorrect: false },\n        { id: 2, text: dictionary[2].translation, isCorrect: false },\n        { id: 3, text: dictionary[3].translation, isCorrect: false },\n      ],\n    });\n\n    shuffle(questions[i].options);\n    i += 1;\n  }\n\n  const optionClicked = (isCorrect: boolean) => {\n    if (isCorrect) {\n      setScore(score + 1);\n    }\n\n    if (currentQuestion + 1 < questions.length) {\n      setCurrentQuestion(currentQuestion + 1);\n    } else {\n      setShowResults(true);\n    }\n  };\n\n  const restartTest = () => {\n    setScore(0);\n    setCurrentQuestion(0);\n    setShowResults(false);\n    questions = [];\n  };\n\n  return (\n    <div className=\"test\">\n      <h1 className=\"test__title\">Test yourself</h1>\n\n      <h2 className=\"test__score\">\n        {`Number of correct answers: ${score}`}\n      </h2>\n\n      {showResults ? (\n        <div className=\"final-results\">\n          <h1>Final Results</h1>\n\n          <h2>\n            {`Your Score: ${(score / questions.length) * 100}%`}\n          </h2>\n\n          <span className=\"final-results__text\">{`Total number of questions: ${questions.length}`}</span>\n          <br />\n\n          <span className=\"final-results__text\">{`Number of Correct Answers: ${score}`}</span>\n          <br />\n\n          <span className=\"final-results__text\">{`Number of Wrong Answers: ${questions.length - score}`}</span>\n          <br />\n\n          <button type=\"button\" className=\"test__button\" onClick={() => restartTest()}>\n            Restart test\n          </button>\n        </div>\n      ) : (\n        <div className=\"question-card\">\n          <h2>\n            {`Question: ${currentQuestion + 1} out of ${questions.length}`}\n          </h2>\n          <h3 className=\"question-text\">{questions[currentQuestion].text}</h3>\n\n          <ul className=\"test__list\">\n            {questions[currentQuestion].options.map((option) => {\n              return (\n                // eslint-disable-next-line jsx-a11y/no-noninteractive-element-interactions\n                <li\n                  key={option.id}\n                  className=\"test__list__item\"\n                  onClick={() => optionClicked(option.isCorrect)}\n                >\n                  {option.text}\n                </li>\n              );\n            })}\n          </ul>\n        </div>\n      )}\n    </div>\n  );\n};\n","import React, { useEffect } from 'react';\nimport { Navigate, Route, Routes } from 'react-router-dom';\nimport './App.scss';\nimport { HomePage } from './components/HomePage';\nimport dictionary from './api/words.json';\nimport { Word } from './types/Word';\nimport { NewWord } from './components/NewWord';\nimport { Header } from './components/Header';\nimport { PageNotFound } from './components/PageNotFound';\nimport { Test } from './components/Test';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { actions as wordsActions } from './features/words';\nimport { actions as countActions } from './features/count';\n\ninterface Props {\n  dictionary: Word[];\n}\n\nexport const App: React.FC<Props> = () => {\n  const dispatch = useAppDispatch();\n  const words = useAppSelector(state => state.words);\n\n  function getWordsFromServer() {\n    dispatch(wordsActions.setWords(dictionary));\n  }\n\n  useEffect(() => {\n    getWordsFromServer();\n  }, []);\n\n  const addWord = (word: Word) => {\n    dispatch(wordsActions.addWords(word));\n  };\n\n  const deleteWord = (wordId: number) => {\n    dispatch(wordsActions.removeWords(wordId));\n    dispatch(countActions.take(1));\n  };\n\n  const maxId = Math.max(...words.map(word => word.id));\n\n  return (\n    <div className=\"App\">\n      <Header />\n      <main className=\"main\">\n        <Routes>\n          <Route path=\"/\" element={<HomePage words={words} onDelete={deleteWord} />} />\n          <Route path=\"/home\" element={<Navigate to=\"/\" replace />} />\n          <Route path=\"/newWord\" element={<NewWord onAdd={addWord} maxId={maxId} words={words} onDelete={deleteWord} />} />\n          <Route path=\"/test\" element={<Test words={words} />} />\n          <Route path=\"*\" element={<PageNotFound />} />\n        </Routes>\n      </main>\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport store from './app/store';\nimport { App } from './App';\n\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}