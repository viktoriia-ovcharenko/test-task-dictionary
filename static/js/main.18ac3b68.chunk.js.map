{"version":3,"sources":["features/words.ts","app/store.ts","components/WordsList/WordsList.tsx","components/HomePage/HomePage.tsx","components/TextField/TextField.tsx","components/NewWord/NewWord.tsx","components/Header/Header.tsx","components/PageNotFound/PageNotFound.tsx","components/Test/Test.tsx","app/hooks.ts","App.tsx","index.tsx"],"names":["actions","words","type","payload","wordsReducer","action","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","WordsList","className","cellSpacing","map","word","text","translation","id","HomePage","TextField","name","value","label","required","onChange","isWordValid","useState","Math","random","toString","slice","touched","setToched","hasError","trim","textIsNotValid","htmlFor","classNames","placeholder","event","target","onBlur","NewWord","onAdd","maxId","count","setCount","setText","setTranslation","inputedText","test","isTranslateValid","inputedTranslate","isDisabled","onSubmit","preventDefault","currentCount","disabled","length","Header","isChoosen","setIsChoosen","href","to","onClick","PageNotFound","shuffle","arr","sort","Test","showResults","setShowResults","currentQuestion","setCurrentQuestion","score","setScore","dictionary","JSON","parse","stringify","questions","i","copy","splice","indexOf","push","options","isCorrect","option","useAppDispatch","useDispatch","useAppSelector","useSelector","App","dispatch","state","useEffect","max","path","element","replace","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.18ac3b68.chunk.js","sourcesContent":["import { Word } from '../types/Word';\n\ntype SetWordsAction = {\n  type: 'words/SET';\n  payload: Word[];\n};\n\n// type AddWordsAction = {\n//   type: 'words/ADD';\n//   payload: Word;\n// };\n\nconst setWords = (words: Word[]): SetWordsAction => ({\n  type: 'words/SET',\n  payload: words,\n});\n\n// const addWords = (word: Word): AddWordsAction => ({\n//   type: 'words/ADD',\n//   payload: word,\n// });\n\nexport const actions = { setWords };\n\ntype Action = SetWordsAction;\n\nconst wordsReducer = (\n  words: Word[] = [],\n  action: Action,\n): Word[] => {\n  switch (action.type) {\n    case 'words/SET':\n      return action.payload;\n\n    // case 'words/ADD':\n    //   return [\n    //     ...words,\n    //     action.payload,\n    //   ];\n    default:\n      return words;\n  }\n};\n\nexport default wordsReducer;\n","import { legacy_createStore as createStore, applyMiddleware, combineReducers } from 'redux';\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport wordsReducer from '../features/words';\n\nconst rootReducer = combineReducers({\n  words: wordsReducer,\n});\n\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import React from 'react';\nimport './WordsList.scss';\nimport { Word } from '../../types/Word';\n\ninterface Props {\n  words: Word[];\n}\n\nexport const WordsList: React.FC<Props> = ({ words }) => {\n  return (\n    <table className=\"words-list\" cellSpacing=\"0\">\n      <tr className=\"words-list__title\">\n        <th className=\"words-list__title__text text\">Word</th>\n        <th className=\"words-list__title__text text\">Translation</th>\n      </tr>\n      {words.map(word => (\n        <tr key={word.id} className=\"words-list__items\">\n          <td className=\"words-list__items__text text\">{word.text}</td>\n          <td className=\"words-list__items__text text\">{word.translation}</td>\n        </tr>\n      ))}\n    </table>\n  );\n};\n","import React from 'react';\nimport './HomePage.scss';\nimport { Word } from '../../types/Word';\nimport { WordsList } from '../WordsList';\n\ninterface Props {\n  words: Word[];\n}\n\nexport const HomePage: React.FC<Props> = ({ words }) => {\n  return (\n    <div className=\"home container\">\n      <h1 className=\"home__title\">Your Dictionary</h1>\n      <WordsList words={words} />\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport './TextField.scss';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  required?: boolean,\n  onChange?: (newValue: string) => void,\n  isWordValid: boolean,\n};\n\nfunction getRandomDigits() {\n  return Math.random().toString().slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  required = false,\n  onChange = () => {},\n  isWordValid = true,\n}) => {\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n\n  const [touched, setToched] = useState(false);\n  const hasError = touched && required && !value.trim();\n  const textIsNotValid = touched && !isWordValid;\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n      <div className=\"control\">\n        <input\n          id={id}\n          className={classNames('input', {\n            'is-danger': hasError,\n          })}\n          type=\"text\"\n          placeholder={`Enter ${label}`}\n          value={value}\n          onChange={event => onChange(event.target.value)}\n          onBlur={() => setToched(true)}\n        />\n      </div>\n      {hasError && (\n        <p className=\"help is-danger\">{`${label} is required`}</p>\n      )}\n\n      {textIsNotValid && (\n        <p className=\"help is-danger\">{`${label} is not valid`}</p>\n      )}\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport './NewWord.scss';\nimport { Word } from '../../types/Word';\nimport { TextField } from '../TextField';\nimport { WordsList } from '../WordsList';\n\ninterface Props {\n  onAdd: (word: Word) => void;\n  maxId: number;\n  words: Word[];\n}\n\nexport const NewWord: React.FC<Props> = ({ onAdd, maxId, words }) => {\n  const [count, setCount] = useState(0);\n  const [text, setText] = useState('');\n  const [translation, setTranslation] = useState('');\n\n  const reset = () => {\n    setText('');\n    setTranslation('');\n  };\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    const word = {\n      id: maxId + 1,\n      text,\n      translation,\n    };\n\n    onAdd(word);\n    setCount(currentCount => currentCount + 1);\n    reset();\n  };\n\n  const isWordValid = (inputedText: string) => {\n    const pattern = /[А-Яа-яёЁЇїІіЄєҐґ]/;\n\n    return pattern.test(inputedText);\n  };\n\n  const isTranslateValid = (inputedTranslate: string) => {\n    const pattern = /[a-zA-Z]/;\n\n    return pattern.test(inputedTranslate);\n  };\n\n  const isDisabled = !(text.trim() && translation.trim()\n   && isWordValid(text) && isTranslateValid(translation));\n\n  return (\n    <>\n      <form\n        className=\"new-word\"\n        key={count}\n        onSubmit={handleSubmit}\n      >\n        <h2 className=\"new-word__title\">Add a word</h2>\n\n        <TextField\n          name=\"text\"\n          label=\"Word\"\n          value={text}\n          onChange={setText}\n          required\n          isWordValid={isWordValid(text)}\n        />\n\n        <TextField\n          name=\"translation\"\n          label=\"Translation\"\n          value={translation}\n          onChange={setTranslation}\n          isWordValid={isTranslateValid(translation)}\n        />\n\n        <div className=\"new-word__field is-grouped\">\n          <div className=\"control\">\n            <button\n              type=\"submit\"\n              className=\"button is-link\"\n              disabled={isDisabled}\n            >\n              Add\n            </button>\n          </div>\n        </div>\n      </form>\n\n      {count > 0 && (\n        <>\n          <p>A new word has been added!</p>\n          <WordsList words={words.slice(words.length - count)} />\n        </>\n      )}\n    </>\n  );\n};\n","import './Header.scss';\nimport React, { useState } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport classNames from 'classnames';\n// import Logo from '../../images/Vocabulary-Otsoa-Etxeberria.png';\n\nexport const Header: React.FC = () => {\n  const [isChoosen, setIsChoosen] = useState('Home');\n\n  return (\n    <header className=\"header\">\n      <a href=\"#/\" className=\"header__main-link\">\n        {/* <img src=\"Vocabulary-Otsoa-Etxeberria.png\" alt=\"logo\" /> */}\n        {/* <Logo /> */}\n      </a>\n\n      <nav className=\"nav\">\n        <ul className=\"nav__list\">\n          <li className=\"nav__item \">\n            <NavLink\n              to=\"/\"\n              className={classNames('nav__link', {\n                'is-active': isChoosen === 'Home',\n              })}\n              onClick={() => setIsChoosen('Home')}\n            >\n              Home\n            </NavLink>\n          </li>\n          <li className=\"nav__item\">\n            <NavLink\n              to=\"/newWord\"\n              className={classNames('nav__link', {\n                'is-active': isChoosen === 'NewWord',\n              })}\n              onClick={() => setIsChoosen('NewWord')}\n            >\n              New Word\n            </NavLink>\n          </li>\n          <li className=\"nav__item\">\n            <NavLink\n              to=\"/test\"\n              className={classNames('nav__link', {\n                'is-active': isChoosen === 'Test',\n              })}\n              onClick={() => setIsChoosen('Test')}\n            >\n              Test\n            </NavLink>\n          </li>\n        </ul>\n      </nav>\n    </header>\n  );\n};\n","import React from 'react';\nimport './PageNotFound.scss';\n\nexport const PageNotFound: React.FC = () => {\n  return <h1 className=\"page-not-found\">Page not found</h1>;\n};\n","/* eslint-disable jsx-a11y/click-events-have-key-events */\nimport React, { useState } from 'react';\nimport './Test.scss';\nimport { Word } from '../../types/Word';\n\ninterface Props {\n  words: Word[];\n}\n\nfunction shuffle(arr: any) {\n  arr.sort(() => Math.random() - 0.5);\n}\n\nexport const Test: React.FC<Props> = ({ words }) => {\n  const [showResults, setShowResults] = useState(false);\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [score, setScore] = useState(0);\n\n  const dictionary = JSON.parse(JSON.stringify(words));\n\n  let questions = [];\n  let i = 0;\n\n  while (questions.length < 10) {\n    const copy = JSON.parse(JSON.stringify(words));\n\n    shuffle(dictionary);\n    shuffle(copy);\n\n    copy.splice(copy.indexOf(dictionary[0]), 1);\n\n    questions.push({\n      text: dictionary[0].text,\n      options: [\n        { id: 0, text: dictionary[0].translation, isCorrect: true },\n        { id: 1, text: copy[1].translation, isCorrect: false },\n        { id: 2, text: copy[2].translation, isCorrect: false },\n        { id: 3, text: copy[3].translation, isCorrect: false },\n      ],\n    });\n\n    dictionary.splice(0, 1);\n\n    shuffle(questions[i].options);\n    i += 1;\n  }\n\n  const optionClicked = (isCorrect: boolean) => {\n    if (isCorrect) {\n      setScore(score + 1);\n    }\n\n    if (currentQuestion + 1 < questions.length) {\n      setCurrentQuestion(currentQuestion + 1);\n    } else {\n      setShowResults(true);\n    }\n  };\n\n  const restartTest = () => {\n    setScore(0);\n    setCurrentQuestion(0);\n    setShowResults(false);\n    questions = [];\n  };\n\n  return (\n    <div className=\"test\">\n      <h1>Test yourself</h1>\n\n      <h2>\n        {`Score: ${score}`}\n      </h2>\n\n      {showResults ? (\n        <div className=\"final-results\">\n          <h1>Final Results</h1>\n\n          <h2>\n            {`Your Score: ${(score / questions.length) * 100}%`}\n          </h2>\n\n          <span className=\"final-results__text\">{`Total number of questions: ${questions.length}`}</span>\n          <br />\n\n          <span className=\"final-results__text\">{`Number of Correct Answers: ${score}`}</span>\n          <br />\n\n          <span className=\"final-results__text\">{`Number of Wrong Answers: ${questions.length - score}`}</span>\n          <br />\n\n          <button type=\"button\" className=\"test__button\" onClick={() => restartTest()}>\n            Restart test\n          </button>\n        </div>\n      ) : (\n        <div className=\"question-card\">\n          <h2>\n            {`Question: ${currentQuestion + 1} out of ${questions.length}`}\n          </h2>\n          <h3 className=\"question-text\">{questions[currentQuestion].text}</h3>\n\n          <ul className=\"test__list\">\n            {questions[currentQuestion].options.map((option) => {\n              return (\n                // eslint-disable-next-line jsx-a11y/no-noninteractive-element-interactions\n                <li\n                  key={option.id}\n                  className=\"test__list__item\"\n                  onClick={() => optionClicked(option.isCorrect)}\n                >\n                  {option.text}\n                </li>\n              );\n            })}\n          </ul>\n        </div>\n      )}\n    </div>\n  );\n};\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import React, { useEffect } from 'react';\nimport { Navigate, Route, Routes } from 'react-router-dom';\nimport './App.scss';\nimport { HomePage } from './components/HomePage';\nimport dictionary from './api/words.json';\nimport { Word } from './types/Word';\nimport { NewWord } from './components/NewWord';\nimport { Header } from './components/Header';\nimport { PageNotFound } from './components/PageNotFound';\nimport { Test } from './components/Test';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { actions } from './features/words';\n\ninterface Props {\n  dictionary: Word[];\n}\n\nexport const App: React.FC<Props> = () => {\n  // const [words, setWords] = useState(dictionary);\n  const dispatch = useAppDispatch();\n  const words = useAppSelector(state => state.words);\n\n  function getWordsFromServer() {\n    dispatch(actions.setWords(dictionary));\n  }\n\n  useEffect(() => {\n    getWordsFromServer();\n  }, []);\n\n  const addWord = (word: Word) => {\n    words.push(word);\n  };\n\n  // const addWord = (word: Word) => {\n  //   setWords(wordsList => [\n  //     ...wordsList,\n  //     word,\n  //   ]);\n  // };\n\n  const maxId = Math.max(...words.map(word => word.id));\n\n  return (\n    <div className=\"App\">\n      <Header />\n      <main className=\"main\">\n        <Routes>\n          <Route path=\"/\" element={<HomePage words={words} />} />\n          <Route path=\"/home\" element={<Navigate to=\"/\" replace />} />\n          <Route path=\"*\" element={<PageNotFound />} />\n          <Route path=\"/newWord\" element={<NewWord onAdd={addWord} maxId={maxId} words={words} />} />\n          <Route path=\"/test\" element={<Test words={words} />} />\n        </Routes>\n      </main>\n    </div>\n  );\n};\n","// import React from 'react';\n// import { BrowserRouter } from 'react-router-dom';\n// import ReactDOM from 'react-dom';\n// import './index.scss';\n// import { App } from './App';\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <BrowserRouter>\n//       <App />\n//     </BrowserRouter>\n//   </React.StrictMode>,\n//   document.getElementById('root'),\n// );\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}